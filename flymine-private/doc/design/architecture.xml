Architecture


Ace models.wrm represents a "schema of everything". Approx 78 classes,
600+ crosslinks, half 1->n, half n->n. We will write a converter from
ace to XMI/XML Schema to test whether Castor can cope with a model of
this complexity.

On first sight, this does not allow us to optimise the schema without
interfeing with the things we get for free from Castor (O/R mapping,
schema etc.). However, we intend to create flattened tables, together
with meta data which records the mapping of auto-generated tables to
flattened tables. Using this mapping, we should be able to rewrite the
SQL queries generated by Castor, to run against our flattened tables
(remember use of yacc/lex for SQL parsing. ??Could we use
PostgreSQL/MySql's own parsers, which are probably in C). These
flattened tables are really only pre-joined tables, but have the
advantage of allowing indexes over columns which would otherwise be in
separate tables. We are suprised that this approach has not been
thought of before. We know it would not work on a read-write database,
but we intend to keep the queryable database and r/w databases
separate. The final (queryable) database may not actually need the
original (non-flattened) tables in it. We believe that Oracle/Sybase
cannot already do this. Is this what DiscoveryLink does?? If
successful, this could be useful in its own right as a database tool
that could be incorporated in MySql/PostgreSQL.

The alternative to the above is to maintain 2 automatically generated
systems - one using a "normal" schema (like Castor), the other using a
flattened schema. We believe that we would soon get into a mess with
this.

We think it likely that we will not be able to serve clones of the
entire Flymine schema from different webserver blades because of
space/CPU restrictions, and also the fact that it will take around 10
hours to transfer a 300Gb database to the webservers (using 100Mb
ethernet).
