#!/usr/bin/perl -w

# Usage: logfile <filename> <days to keep>
#
# This script will delete all logfiles older than <days to keep>
# It will then create a new logfile filled with contents of
# stdin.


use strict;

use POSIX;
use DirHandle;
use File::Basename;
use IO::File;

if ($#ARGV < 1) {
    die "Usage: $0 <filename> <days to keep>";
}

my $file_base = shift(@ARGV);
my $keep = shift(@ARGV);

my ($file_stub, $base_dir, $file_suffix) =
    &File::Basename::fileparse($file_base);

# Don't delete files if keep is 0.
# You can use -1 to force a deletion of all current log files.
&delete_old_files($file_base, $keep) if ($keep);

&save_to_file($file_base);

sub delete_old_files {

    my ($file_base, $days_to_keep) = @_;

    my $full_name;

    my $dh = new DirHandle "$base_dir" ||
	die "Could not open $base_dir : $!\n";

    while (defined($_ = $dh->read)) {
        if (/^\Q$file_stub\E_/o) {
	    $full_name = "${base_dir}$_";
	    if (-M $full_name > $days_to_keep) {
		unlink($full_name) ||
		    warn "Could not delete $full_name : $!\n";
	    }
	}
    }
}

sub save_to_file {

    my ($base) = @_;

#    my $today = &Date::Std::GetDate(0);
    my $today=lc(POSIX::strftime("%Y%m%d", localtime(time)));

    my $filename = "${base}_${today}";

    my $fh = new IO::File;

    # Find the first available filename, and open it for output. 
    # This is quite tricky in order to avoid race conditions
    # Try 1000 times, then try a temporary solution, and then fail

    my $i = 1;

    for (1..1000) {
	$i++ while ( -f "${filename}_${i}.log" );
	if ($fh->open("${filename}_${i}.log", O_EXCL|O_CREAT|O_WRONLY)) {
	    $filename = "${filename}_${i}.log";
	    last;
	}
	if ($_ == 1000) {
	    warn "Giving up on ${filename}_${i}.log : $!\n";
	    $filename = "/tmp/logfile_${today}_$$";
	    if ($fh->open($filename, O_EXCL|O_CREAT|O_WRONLY)) {
		warn "Writing output to $filename instead\n";
	    } else {
		die "Could not even open a temporary log file to write to : $!\n";
	    }
	}
    }

    while (<>) {
	print $fh $_ || die "Could not write to $filename : $!\n";
    }
    $fh->close or die "Cannot close $filename\n";

}
