<article>
<artheader>
<date>2004-01-16</date>
<title>The FlyMine web service</title>
<authorgroup>
<author>
<firstname>Mark</firstname>
<surname>Woodbridge</surname>
</author>
</authorgroup>
</artheader>

<sect1>
<para>
This document describes how to install and use the FlyMine web service, which allow queries to a remote database. This may be a central data store, in which case it is not necessary to install a local server. At present both server and client usage require the FlyMine source distribution.
</para>
<para>
The web service has a client/server architecture. Network access is transparent to the user, and queries are performed in the same way as in any other ObjectStore. It consists of two components: the server and the client, which are configured and run independently. Communication is performed using SOAP over HTTP which should allow connection even if the client is behind a firewall. A server must be installed or located before the client can be used.
</para>
</sect1>

<sect1>
<title>
Client usage
</title>
<para>
Usage if the client requires:
<itemizedlist>
<listitem>a Java runtime</listitem>
<listitem>the FlyMine jar, dependent jars, and a jar for model against which you wish to query</listitem>
<listitem>knowledge of the URL of a server</listitem>
</itemizedlist>
</para>
<para>
The client is just an ObjectStore implementation, and is configured using properties in similar way to any other ObjectStore. The relevant implementation class is specified in addition to the server URL (which is analogous to the database alias specified for an ObjectStore backed by a relational store.)
</para>
<para>
Suitable properties could be:
</para>
<programlisting>
flymine.properties:

os.ws-client.class=org.flymine.objectstore.webservice.ObjectStoreClient
os.ws-client.model=testmodel
os.ws-client.alias=client
os.ws-client.client.url=http://localhost:8080/webservice/services/ObjectStore

os.query.max-time=1000000000
os.query.max-limit=10000
os.query.max-offset=10000
os.queue-len=100
</programlisting>
<para>
Assuming these properties are accessible, and that the required jars are on the <command>CLASSPATH</command>, a suitable test is to run <command>java org.flymine.objectstore.query.fql.FqlShell</command>, which should allow you to interactively run queries against the remote database.
</para>
</sect1>

<sect1>
<title>Server installation</title>
<para>
The server provides a remote interface to an underlying ObjectStore specified using the <command>os.default</command> property in <command>flymine.properties</command>. This ObjectStore, which may use a database, should be configured and tested separately.
</para>
<para>
The server is implemented using the Apache Axis engine, and runs as a web application in a suitable servlet container. The FlyMine ant build script will package the web service as a web archive (.war) file suitable for deployment in containers that implement at least version 2.2 of the Servlet specification. This archive, built using the <command>build-webservice</command> target, includes all dependencies and does not require Axis to be installed separately.
</para>
<para>
If you are using the Apache Tomcat container the build script can additionally deploy the web application using the <command>release-webservice</command> target. This requires configuration information such as the target host and port, along a username and password for a user with "manager" privileges and a deployment path.  The URL that is subsequently used to access the service is derived from this path. Deployment is dynamic: it requires Tomcat to be running and does not require it to be immediately restarted.
</para>
<para>
The following properties should be sufficient:
</para>
<programlisting>
~/build.properties.flymine:

webservice.baseurl=http://localhost:8080
webservice.path=/webservice
webservice.manager=manager
webservice.password=manager

$CATALINA_HOME/conf/tomcat-users.xml:
<![CDATA[
<tomcat-users>
  ...
  <role rolename="manager"/>
  <user username="manager" password="manager" roles="manager"/>
</tomcat-users>
]]>
</programlisting>
</sect1>
</article>
